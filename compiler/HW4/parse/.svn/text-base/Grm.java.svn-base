
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 07 09:11:32 EST 2013
//----------------------------------------------------

package parse;

import syntaxtree.*;

/** CUP v0.10k generated parser.
  * @version Thu Mar 07 09:11:32 EST 2013
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\004\000\002\004" +
    "\023\000\002\006\004\000\002\006\002\000\002\005\010" +
    "\000\002\010\004\000\002\010\002\000\002\007\017\000" +
    "\002\012\004\000\002\012\002\000\002\011\005\000\002" +
    "\020\005\000\002\020\003\000\002\021\003\000\002\021" +
    "\002\000\002\017\004\000\002\016\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\015\004\000" +
    "\002\015\003\000\002\014\003\000\002\014\002\000\002" +
    "\013\005\000\002\013\011\000\002\013\007\000\002\013" +
    "\007\000\002\013\006\000\002\013\011\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\006\000\002\022\005\000\002" +
    "\022\010\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\007" +
    "\000\002\022\006\000\002\022\004\000\002\022\005\000" +
    "\002\024\003\000\002\024\002\000\002\023\005\000\002" +
    "\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\006\006\001\002\000\004\002\207\001" +
    "\002\000\006\002\ufffd\006\ufffd\001\002\000\004\004\007" +
    "\001\002\000\004\031\010\001\002\000\004\007\011\001" +
    "\002\000\004\010\012\001\002\000\004\011\013\001\002" +
    "\000\004\012\014\001\002\000\004\033\015\001\002\000" +
    "\004\013\016\001\002\000\004\035\017\001\002\000\004" +
    "\036\020\001\002\000\004\004\021\001\002\000\004\034" +
    "\022\001\002\000\004\031\023\001\002\000\014\004\024" +
    "\017\030\021\027\022\031\031\025\001\002\000\006\035" +
    "\130\041\131\001\002\000\016\004\024\017\030\021\027" +
    "\022\031\031\025\032\uffe9\001\002\000\004\032\121\001" +
    "\002\000\004\033\115\001\002\000\004\033\107\001\002" +
    "\000\004\033\032\001\002\000\022\004\036\005\043\024" +
    "\034\025\035\026\040\027\033\033\042\047\037\001\002" +
    "\000\006\004\100\015\101\001\002\000\030\030\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\001\002\000\030\030\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\001\002\000\030\030\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\001\002\000\022\004\036\005" +
    "\043\024\034\025\035\026\040\027\033\033\042\047\037" +
    "\001\002\000\030\030\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\001\002\000\022\030\045\034\075\035\051\042\047\043" +
    "\050\044\052\045\053\046\054\001\002\000\022\004\036" +
    "\005\043\024\034\025\035\026\040\027\033\033\042\047" +
    "\037\001\002\000\030\030\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\001\002\000\022\030\045\034\046\035\051\042\047" +
    "\043\050\044\052\045\053\046\054\001\002\000\022\004" +
    "\036\005\043\024\034\025\035\026\040\027\033\033\042" +
    "\047\037\001\002\000\030\030\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\001\002\000\022\004\036\005\043\024\034\025" +
    "\035\026\040\027\033\033\042\047\037\001\002\000\022" +
    "\004\036\005\043\024\034\025\035\026\040\027\033\033" +
    "\042\047\037\001\002\000\022\004\036\005\043\024\034" +
    "\025\035\026\040\027\033\033\042\047\037\001\002\000" +
    "\022\004\036\005\043\024\034\025\035\026\040\027\033" +
    "\033\042\047\037\001\002\000\022\004\036\005\043\024" +
    "\034\025\035\026\040\027\033\033\042\047\037\001\002" +
    "\000\006\004\055\023\056\001\002\000\004\033\057\001" +
    "\002\000\030\030\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001" +
    "\002\000\024\004\036\005\043\024\034\025\035\026\040" +
    "\027\033\033\042\034\uffd0\047\037\001\002\000\004\034" +
    "\065\001\002\000\024\030\045\034\uffce\035\051\040\uffce" +
    "\042\047\043\050\044\052\045\053\046\054\001\002\000" +
    "\006\034\uffd1\040\063\001\002\000\022\004\036\005\043" +
    "\024\034\025\035\026\040\027\033\033\042\047\037\001" +
    "\002\000\024\030\045\034\uffcf\035\051\040\uffcf\042\047" +
    "\043\050\044\052\045\053\046\054\001\002\000\030\030" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002\000\030\030" +
    "\uffde\034\uffde\035\051\036\uffde\037\uffde\040\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\046\054\001\002\000\030\030" +
    "\uffdf\034\uffdf\035\051\036\uffdf\037\uffdf\040\uffdf\042\uffdf" +
    "\043\uffdf\044\uffdf\045\053\046\054\001\002\000\022\030" +
    "\045\035\051\036\071\042\047\043\050\044\052\045\053" +
    "\046\054\001\002\000\030\030\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\001\002\000\030\030\uffe0\034\uffe0\035\051\036" +
    "\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045\053" +
    "\046\054\001\002\000\030\030\045\034\uffe2\035\051\036" +
    "\uffe2\037\uffe2\040\uffe2\042\uffe2\043\050\044\052\045\053" +
    "\046\054\001\002\000\030\030\uffe1\034\uffe1\035\051\036" +
    "\uffe1\037\uffe1\040\uffe1\042\uffe1\043\050\044\052\045\053" +
    "\046\054\001\002\000\004\037\076\001\002\000\022\004" +
    "\uffe5\014\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\031\uffe5" +
    "\032\uffe5\001\002\000\030\030\uffd3\034\uffd3\035\051\036" +
    "\uffd3\037\uffd3\040\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\054\001\002\000\004\033\105\001\002\000\004\035" +
    "\102\001\002\000\022\004\036\005\043\024\034\025\035" +
    "\026\040\027\033\033\042\047\037\001\002\000\022\030" +
    "\045\035\051\036\104\042\047\043\050\044\052\045\053" +
    "\046\054\001\002\000\030\030\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\001\002\000\004\034\106\001\002\000\030\030" +
    "\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\001\002\000\022\004" +
    "\036\005\043\024\034\025\035\026\040\027\033\033\042" +
    "\047\037\001\002\000\022\030\045\034\111\035\051\042" +
    "\047\043\050\044\052\045\053\046\054\001\002\000\014" +
    "\004\024\017\030\021\027\022\031\031\025\001\002\000" +
    "\004\020\113\001\002\000\014\004\024\017\030\021\027" +
    "\022\031\031\025\001\002\000\022\004\uffe7\014\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\031\uffe7\032\uffe7\001\002" +
    "\000\022\004\036\005\043\024\034\025\035\026\040\027" +
    "\033\033\042\047\037\001\002\000\022\030\045\034\117" +
    "\035\051\042\047\043\050\044\052\045\053\046\054\001" +
    "\002\000\014\004\024\017\030\021\027\022\031\031\025" +
    "\001\002\000\022\004\uffe6\014\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\031\uffe6\032\uffe6\001\002\000\004\032\122" +
    "\001\002\000\006\002\uffff\006\uffff\001\002\000\004\032" +
    "\127\001\002\000\020\004\024\014\uffea\017\030\021\027" +
    "\022\031\031\025\032\uffea\001\002\000\020\004\uffeb\014" +
    "\uffeb\017\uffeb\021\uffeb\022\uffeb\031\uffeb\032\uffeb\001\002" +
    "\000\020\004\uffec\014\uffec\017\uffec\021\uffec\022\uffec\031" +
    "\uffec\032\uffec\001\002\000\022\004\uffe8\014\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\031\uffe8\032\uffe8\001\002\000" +
    "\022\004\036\005\043\024\034\025\035\026\040\027\033" +
    "\033\042\047\037\001\002\000\022\004\036\005\043\024" +
    "\034\025\035\026\040\027\033\033\042\047\037\001\002" +
    "\000\022\030\045\035\051\037\133\042\047\043\050\044" +
    "\052\045\053\046\054\001\002\000\022\004\uffe4\014\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\031\uffe4\032\uffe4\001" +
    "\002\000\022\030\045\035\051\036\135\042\047\043\050" +
    "\044\052\045\053\046\054\001\002\000\004\041\136\001" +
    "\002\000\022\004\036\005\043\024\034\025\035\026\040" +
    "\027\033\033\042\047\037\001\002\000\022\030\045\035" +
    "\051\037\140\042\047\043\050\044\052\045\053\046\054" +
    "\001\002\000\022\004\uffe3\014\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\031\uffe3\032\uffe3\001\002\000\006\002\000" +
    "\006\143\001\002\000\006\002\ufffe\006\ufffe\001\002\000" +
    "\004\004\144\001\002\000\004\031\145\001\002\000\014" +
    "\004\ufff7\007\ufff7\015\ufff7\016\ufff7\032\ufff7\001\002\000" +
    "\014\004\147\007\ufffa\015\154\016\153\032\ufffa\001\002" +
    "\000\004\004\uffed\001\002\000\006\007\163\032\162\001" +
    "\002\000\004\004\157\001\002\000\026\004\ufff8\007\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\031" +
    "\ufff8\032\ufff8\001\002\000\004\004\uffef\001\002\000\006" +
    "\004\uffee\035\155\001\002\000\004\036\156\001\002\000" +
    "\004\004\ufff0\001\002\000\004\037\160\001\002\000\026" +
    "\004\ufff6\007\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021" +
    "\ufff6\022\ufff6\031\ufff6\032\ufff6\001\002\000\006\007\ufffb" +
    "\032\ufffb\001\002\000\006\002\ufffc\006\ufffc\001\002\000" +
    "\010\004\147\015\154\016\153\001\002\000\004\004\165" +
    "\001\002\000\004\033\166\001\002\000\012\004\147\015" +
    "\154\016\153\034\ufff2\001\002\000\006\034\ufff4\040\ufff4" +
    "\001\002\000\004\004\206\001\002\000\006\034\ufff3\040" +
    "\204\001\002\000\004\034\173\001\002\000\004\031\174" +
    "\001\002\000\022\004\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\021\ufff7\022\ufff7\031\ufff7\001\002\000\022\004\176" +
    "\014\uffe9\015\154\016\153\017\030\021\027\022\031\031" +
    "\025\001\002\000\010\004\uffed\035\130\041\131\001\002" +
    "\000\004\014\200\001\002\000\022\004\036\005\043\024" +
    "\034\025\035\026\040\027\033\033\042\047\037\001\002" +
    "\000\022\030\045\035\051\037\202\042\047\043\050\044" +
    "\052\045\053\046\054\001\002\000\004\032\203\001\002" +
    "\000\006\007\ufff9\032\ufff9\001\002\000\010\004\147\015" +
    "\154\016\153\001\002\000\006\034\ufff5\040\ufff5\001\002" +
    "\000\006\034\ufff1\040\ufff1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\004\006\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\025\001\001" +
    "\000\002\001\001\000\010\013\124\014\122\015\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\073\001\001\000\002\001\001\000" +
    "\004\022\072\001\001\000\004\022\071\001\001\000\004" +
    "\022\067\001\001\000\004\022\066\001\001\000\004\022" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\060\023\061\024\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\107\001\001\000\002\001" +
    "\001\000\004\013\111\001\001\000\002\001\001\000\004" +
    "\013\113\001\001\000\002\001\001\000\004\022\115\001" +
    "\001\000\002\001\001\000\004\013\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\133\001\001\000" +
    "\004\022\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\145\001\001\000\010\010\147\011\151" +
    "\016\150\001\001\000\002\001\001\000\004\007\160\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\167\017\166\020\170\021\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\174" +
    "\001\001\000\014\011\151\013\124\014\176\015\123\016" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\167\017\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    errormsg.ErrorMsg errorMsg;

    public void syntax_error(java_cup.runtime.Symbol current) {
      report_error("Syntax error (" + current.sym + ")", current);
    }

    public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
    }

    public Grm(java_cup.runtime.Scanner scan, errormsg.ErrorMsg err) {
      this(scan);
      errorMsg = err;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {



  // An abbreviation for creating identifiers.
  static Identifier id(String s) {
    return new Identifier(s);
  }


  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expList ::= expr 
            {
              syntaxtree.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 ExpList el = new ExpList(); el.addElement(e); RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expList ::= expList COMMA expr 
            {
              syntaxtree.ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.ExpList el = (syntaxtree.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 el.addElement(e); RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expS ::= 
            {
              syntaxtree.ExpList RESULT = null;
		 RESULT = new ExpList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*expS*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expS ::= expList 
            {
              syntaxtree.ExpList RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.ExpList el = (syntaxtree.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = el; 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*expS*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LPAREN expr RPAREN 
            {
              syntaxtree.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= EXCLAMATION expr 
            {
              syntaxtree.Exp RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Not(exleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NEW ID LPAREN RPAREN 
            {
              syntaxtree.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new NewObject(nleft, id(id)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= NEW INT LBRACK expr RBRACK 
            {
              syntaxtree.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new NewArray(nleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= THIS 
            {
              syntaxtree.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new This(tleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= ID 
            {
              syntaxtree.Exp RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IdentifierExp(idleft, id); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= FALSE 
            {
              syntaxtree.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new False(fleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= TRUE 
            {
              syntaxtree.Exp RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new True(tleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= INTEGER_LITERAL 
            {
              syntaxtree.Exp RESULT = null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IntegerLiteral(illeft,il); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr DOT ID LPAREN expS RPAREN 
            {
              syntaxtree.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.ExpList es = (syntaxtree.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Call(idleft, e, id(id), es); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr DOT LENGTH 
            {
              syntaxtree.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new ArrayLength(eleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr LBRACK expr RBRACK 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ArrayLookup(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr TIMES expr 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Times(tleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr MINUS expr 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mnleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object mn = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Minus(mnleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr PLUS expr 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Plus(plleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr LT expr 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new LessThan(ltleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr AND expr 
            {
              syntaxtree.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new And(aleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= ID LBRACK expr RBRACK ASSIGN expr SEMICOLON 
            {
              syntaxtree.Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		syntaxtree.Exp e1 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e2 = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ArrayAssign(idleft, id(id), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= ID ASSIGN expr SEMICOLON 
            {
              syntaxtree.Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Assign(idleft, id(id), e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= PRINTLN LPAREN expr RPAREN SEMICOLON 
            {
              syntaxtree.Statement RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new Print(plleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= WHILE LPAREN expr RPAREN statement 
            {
              syntaxtree.Statement RESULT = null;
		int whleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement st = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new While(whleft, e, st); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              syntaxtree.Statement RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Statement st1 = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement st2 = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new If(ileft, e, st1, st2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= LBRACE statementS RBRACE 
            {
              syntaxtree.Statement RESULT = null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.StatementList ss = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Block(ssleft, ss); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementS ::= 
            {
              syntaxtree.StatementList RESULT = null;
		 RESULT = new StatementList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*statementS*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementS ::= statementList 
            {
              syntaxtree.StatementList RESULT = null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.StatementList stl = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = stl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*statementS*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statementList ::= statement 
            {
              syntaxtree.StatementList RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement st = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 StatementList stl = new StatementList(); stl.addElement(st); RESULT = stl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*statementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statementList ::= statementList statement 
            {
              syntaxtree.StatementList RESULT = null;
		int stlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int stlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.StatementList stl = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Statement st = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 stl.addElement(st); RESULT = stl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*statementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= ID 
            {
              syntaxtree.Type RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IdentifierType(idleft, id(id).toString()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              syntaxtree.Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new IntegerType(ileft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOLEAN 
            {
              syntaxtree.Type RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new BooleanType(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT LBRACK RBRACK 
            {
              syntaxtree.Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new IntArrayType(ileft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type ID 
            {
              syntaxtree.Formal RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Formal(idleft, t, id(id)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*formal*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalS ::= 
            {
              syntaxtree.FormalList RESULT = null;
		 RESULT = new FormalList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*formalS*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalS ::= formalList 
            {
              syntaxtree.FormalList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.FormalList fl = (syntaxtree.FormalList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*formalS*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalList ::= formal 
            {
              syntaxtree.FormalList RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Formal f = (syntaxtree.Formal)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 FormalList fl = new FormalList(); fl.addElement(f); RESULT = fl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*formalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalList ::= formalList COMMA formal 
            {
              syntaxtree.FormalList RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.FormalList fl = (syntaxtree.FormalList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.Formal f = (syntaxtree.Formal)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 fl.addElement(f); RESULT = fl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*formalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDecl ::= type ID SEMICOLON 
            {
              syntaxtree.VarDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new VarDecl(idleft, t, id(id)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*varDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclList ::= 
            {
              syntaxtree.VarDeclList RESULT = null;
		 RESULT = new VarDeclList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclList ::= varDeclList varDecl 
            {
              syntaxtree.VarDeclList RESULT = null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.VarDeclList vdl = (syntaxtree.VarDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.VarDecl vd = (syntaxtree.VarDecl)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 vdl.addElement(vd); RESULT = vdl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE 
            {
              syntaxtree.MethodDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-11)).right;
		syntaxtree.Type t = (syntaxtree.Type)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-10)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		syntaxtree.FormalList fs = (syntaxtree.FormalList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		syntaxtree.VarDeclList vdl = (syntaxtree.VarDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		syntaxtree.StatementList st = (syntaxtree.StatementList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Exp e = (syntaxtree.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new MethodDecl(idleft, t, id(id), fs, vdl, st, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-12)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methodDeclList ::= 
            {
              syntaxtree.MethodDeclList RESULT = null;
		 RESULT = new MethodDeclList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*methodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methodDeclList ::= methodDeclList methodDecl 
            {
              syntaxtree.MethodDeclList RESULT = null;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.MethodDeclList mdl = (syntaxtree.MethodDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int mdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int mdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.MethodDecl md = (syntaxtree.MethodDecl)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 mdl.addElement(md); RESULT = mdl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*methodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS ID LBRACE varDeclList methodDeclList RBRACE 
            {
              syntaxtree.ClassDeclSimple RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.VarDeclList vdl = (syntaxtree.VarDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int mdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.MethodDeclList mdl = (syntaxtree.MethodDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new ClassDeclSimple(idleft, id(id), vdl, mdl); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*classDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclList ::= 
            {
              syntaxtree.ClassDeclList RESULT = null;
		 RESULT = new ClassDeclList(); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*classDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclList ::= classDeclList classDecl 
            {
              syntaxtree.ClassDeclList RESULT = null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.ClassDeclList cdl = (syntaxtree.ClassDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.ClassDeclSimple cd = (syntaxtree.ClassDeclSimple)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 cdl.addElement(cd); RESULT = cdl; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*classDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE 
            {
              syntaxtree.MainClass RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-15)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-15)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		syntaxtree.Statement st = (syntaxtree.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		 RESULT = new MainClass(id1left, id(id1), id(id2), st); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*mainClass*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-16)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mainClass classDeclList 
            {
              syntaxtree.Program RESULT = null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.MainClass mc = (syntaxtree.MainClass)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		syntaxtree.ClassDeclList cd = (syntaxtree.ClassDeclList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Program(mcleft, mc, cd); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		syntaxtree.Program start_val = (syntaxtree.Program)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

