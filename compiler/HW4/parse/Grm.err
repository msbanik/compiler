Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
[0]EOF [1]error [2]ID [3]INTEGER_LITERAL [4]CLASS 
[5]PUBLIC [6]STATIC [7]VOID [8]MAIN [9]STRING 
[10]RETURN [11]INT [12]BOOLEAN [13]IF [14]ELSE 
[15]WHILE [16]PRINTLN [17]LENGTH [18]TRUE [19]FALSE 
[20]THIS [21]NEW [22]LT [23]LBRACE [24]RBRACE 
[25]LPAREN [26]RPAREN [27]LBRACK [28]RBRACK [29]SEMICOLON 
[30]COMMA [31]ASSIGN [32]AND [33]PLUS [34]MINUS 
[35]TIMES [36]DOT [37]EXCLAMATION 

===== Non terminals =====
[0]$START [1]program [2]mainClass [3]classDecl [4]classDeclList 
[5]methodDecl [6]methodDeclList [7]varDecl [8]varDeclList [9]statement 
[10]statementS [11]statementList [12]type [13]formal [14]formalList 
[15]formalS [16]expr [17]expList [18]expS 

===== Productions =====
[0] $START ::= program EOF 
[1] program ::= mainClass classDeclList 
[2] mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE 
[3] classDeclList ::= classDeclList classDecl 
[4] classDeclList ::= 
[5] classDecl ::= CLASS ID LBRACE varDeclList methodDeclList RBRACE 
[6] methodDeclList ::= methodDeclList methodDecl 
[7] methodDeclList ::= 
[8] methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE 
[9] varDeclList ::= varDeclList varDecl 
[10] varDeclList ::= 
[11] varDecl ::= type ID SEMICOLON 
[12] formalList ::= formalList COMMA formal 
[13] formalList ::= formal 
[14] formalS ::= formalList 
[15] formalS ::= 
[16] formal ::= type ID 
[17] type ::= INT LBRACK RBRACK 
[18] type ::= BOOLEAN 
[19] type ::= INT 
[20] type ::= ID 
[21] statementList ::= statementList statement 
[22] statementList ::= statement 
[23] statementS ::= statementList 
[24] statementS ::= 
[25] statement ::= LBRACE statementS RBRACE 
[26] statement ::= IF LPAREN expr RPAREN statement ELSE statement 
[27] statement ::= WHILE LPAREN expr RPAREN statement 
[28] statement ::= PRINTLN LPAREN expr RPAREN SEMICOLON 
[29] statement ::= ID ASSIGN expr SEMICOLON 
[30] statement ::= ID LBRACK expr RBRACK ASSIGN expr SEMICOLON 
[31] expr ::= expr AND expr 
[32] expr ::= expr LT expr 
[33] expr ::= expr PLUS expr 
[34] expr ::= expr MINUS expr 
[35] expr ::= expr TIMES expr 
[36] expr ::= expr LBRACK expr RBRACK 
[37] expr ::= expr DOT LENGTH 
[38] expr ::= expr DOT ID LPAREN expS RPAREN 
[39] expr ::= INTEGER_LITERAL 
[40] expr ::= TRUE 
[41] expr ::= FALSE 
[42] expr ::= ID 
[43] expr ::= THIS 
[44] expr ::= NEW INT LBRACK expr RBRACK 
[45] expr ::= NEW ID LPAREN RPAREN 
[46] expr ::= EXCLAMATION expr 
[47] expr ::= LPAREN expr RPAREN 
[48] expS ::= expList 
[49] expS ::= 
[50] expList ::= expList COMMA expr 
[51] expList ::= expr 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [mainClass ::= (*) CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
  [program ::= (*) mainClass classDeclList , {EOF }]
  [$START ::= (*) program EOF , {EOF }]
}
transition on CLASS to state [3]
transition on mainClass to state [2]
transition on program to state [1]

-------------------
lalr_state [1]: {
  [$START ::= program (*) EOF , {EOF }]
}
transition on EOF to state [132]

-------------------
lalr_state [2]: {
  [classDeclList ::= (*) , {EOF CLASS }]
  [program ::= mainClass (*) classDeclList , {EOF }]
  [classDeclList ::= (*) classDeclList classDecl , {EOF CLASS }]
}
transition on classDeclList to state [94]

-------------------
lalr_state [3]: {
  [mainClass ::= CLASS (*) ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on ID to state [4]

-------------------
lalr_state [4]: {
  [mainClass ::= CLASS ID (*) LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [5]

-------------------
lalr_state [5]: {
  [mainClass ::= CLASS ID LBRACE (*) PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [6]

-------------------
lalr_state [6]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC (*) STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on STATIC to state [7]

-------------------
lalr_state [7]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC (*) VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on VOID to state [8]

-------------------
lalr_state [8]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID (*) MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on MAIN to state [9]

-------------------
lalr_state [9]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN (*) LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LPAREN to state [10]

-------------------
lalr_state [10]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN (*) STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on STRING to state [11]

-------------------
lalr_state [11]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING (*) LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LBRACK to state [12]

-------------------
lalr_state [12]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK (*) RBRACK ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on RBRACK to state [13]

-------------------
lalr_state [13]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK (*) ID RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on ID to state [14]

-------------------
lalr_state [14]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID (*) RPAREN LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on RPAREN to state [15]

-------------------
lalr_state [15]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN (*) LBRACE statement RBRACE RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [16]

-------------------
lalr_state [16]: {
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {RBRACE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {RBRACE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {RBRACE }]
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {RBRACE }]
  [statement ::= (*) LBRACE statementS RBRACE , {RBRACE }]
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE (*) statement RBRACE RBRACE , {EOF CLASS }]
}
transition on PRINTLN to state [22]
transition on IF to state [21]
transition on WHILE to state [20]
transition on statement to state [19]
transition on LBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [17]: {
  [statement ::= ID (*) ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= ID (*) LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on ASSIGN to state [86]
transition on LBRACK to state [85]

-------------------
lalr_state [18]: {
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= LBRACE (*) statementS RBRACE , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) LBRACE statementS RBRACE , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statementList ::= (*) statement , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statementS ::= (*) , {RBRACE }]
  [statementList ::= (*) statementList statement , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ID IF WHILE PRINTLN LBRACE RBRACE }]
  [statementS ::= (*) statementList , {RBRACE }]
}
transition on PRINTLN to state [22]
transition on IF to state [21]
transition on WHILE to state [20]
transition on statement to state [82]
transition on statementList to state [81]
transition on statementS to state [80]
transition on LBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [19]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement (*) RBRACE RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [78]

-------------------
lalr_state [20]: {
  [statement ::= WHILE (*) LPAREN expr RPAREN statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on LPAREN to state [74]

-------------------
lalr_state [21]: {
  [statement ::= IF (*) LPAREN expr RPAREN statement ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on LPAREN to state [68]

-------------------
lalr_state [22]: {
  [statement ::= PRINTLN (*) LPAREN expr RPAREN SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on LPAREN to state [23]

-------------------
lalr_state [23]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= PRINTLN LPAREN (*) expr RPAREN SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [30]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [24]: {
  [expr ::= NEW (*) ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= NEW (*) INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INT to state [62]
transition on ID to state [61]

-------------------
lalr_state [25]: {
  [expr ::= TRUE (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [26]: {
  [expr ::= FALSE (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [27]: {
  [expr ::= ID (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [28]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= EXCLAMATION (*) expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [60]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [29]: {
  [expr ::= THIS (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [30]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= PRINTLN LPAREN expr (*) RPAREN SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [58]
transition on LT to state [34]

-------------------
lalr_state [31]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= LPAREN (*) expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [33]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [32]: {
  [expr ::= INTEGER_LITERAL (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [33]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= LPAREN expr (*) RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [35]
transition on LT to state [34]

-------------------
lalr_state [34]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr LT (*) expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [57]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [35]: {
  [expr ::= LPAREN expr RPAREN (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [36]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr AND (*) expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [56]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [37]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr PLUS (*) expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [55]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [38]: {
  [expr ::= (*) expr TIMES expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr LBRACK (*) expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [53]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [39]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr MINUS (*) expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [52]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [40]: {
  [expr ::= expr TIMES (*) expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [51]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [41]: {
  [expr ::= expr DOT (*) LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr DOT (*) ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on LENGTH to state [43]
transition on ID to state [42]

-------------------
lalr_state [42]: {
  [expr ::= expr DOT ID (*) LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on LPAREN to state [44]

-------------------
lalr_state [43]: {
  [expr ::= expr DOT LENGTH (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [44]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expList ::= (*) expList COMMA expr , {RPAREN COMMA }]
  [expr ::= expr DOT ID LPAREN (*) expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expS ::= (*) expList , {RPAREN }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expList ::= (*) expr , {RPAREN COMMA }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expS ::= (*) , {RPAREN }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expList to state [47]
transition on expr to state [46]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]
transition on expS to state [45]

-------------------
lalr_state [45]: {
  [expr ::= expr DOT ID LPAREN expS (*) RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on RPAREN to state [50]

-------------------
lalr_state [46]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expList ::= expr (*) , {RPAREN COMMA }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [47]: {
  [expS ::= expList (*) , {RPAREN }]
  [expList ::= expList (*) COMMA expr , {RPAREN COMMA }]
}
transition on COMMA to state [48]

-------------------
lalr_state [48]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expList ::= expList COMMA (*) expr , {RPAREN COMMA }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [49]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [49]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expList ::= expList COMMA expr (*) , {RPAREN COMMA }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [50]: {
  [expr ::= expr DOT ID LPAREN expS RPAREN (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [51]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr TIMES expr (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [52]: {
  [expr ::= expr MINUS expr (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [53]: {
  [expr ::= expr (*) DOT LENGTH , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr LBRACK expr (*) RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]
transition on RBRACK to state [54]

-------------------
lalr_state [54]: {
  [expr ::= expr LBRACK expr RBRACK (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [55]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr PLUS expr (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [56]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr AND expr (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [57]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr LT expr (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [58]: {
  [statement ::= PRINTLN LPAREN expr RPAREN (*) SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on SEMICOLON to state [59]

-------------------
lalr_state [59]: {
  [statement ::= PRINTLN LPAREN expr RPAREN SEMICOLON (*) , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [60]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= EXCLAMATION expr (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]

-------------------
lalr_state [61]: {
  [expr ::= NEW ID (*) LPAREN RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on LPAREN to state [66]

-------------------
lalr_state [62]: {
  [expr ::= NEW INT (*) LBRACK expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on LBRACK to state [63]

-------------------
lalr_state [63]: {
  [expr ::= (*) expr TIMES expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= NEW INT LBRACK (*) expr RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [64]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [64]: {
  [expr ::= expr (*) DOT LENGTH , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= NEW INT LBRACK expr (*) RBRACK , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]
transition on RBRACK to state [65]

-------------------
lalr_state [65]: {
  [expr ::= NEW INT LBRACK expr RBRACK (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [66]: {
  [expr ::= NEW ID LPAREN (*) RPAREN , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}
transition on RPAREN to state [67]

-------------------
lalr_state [67]: {
  [expr ::= NEW ID LPAREN RPAREN (*) , {LT RPAREN LBRACK RBRACK SEMICOLON COMMA AND PLUS MINUS TIMES DOT }]
}

-------------------
lalr_state [68]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= IF LPAREN (*) expr RPAREN statement ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [69]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [69]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= IF LPAREN expr (*) RPAREN statement ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [70]
transition on LT to state [34]

-------------------
lalr_state [70]: {
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ELSE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ELSE }]
  [statement ::= IF LPAREN expr RPAREN (*) statement ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {ELSE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ELSE }]
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {ELSE }]
  [statement ::= (*) LBRACE statementS RBRACE , {ELSE }]
}
transition on PRINTLN to state [22]
transition on IF to state [21]
transition on WHILE to state [20]
transition on statement to state [71]
transition on LBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [71]: {
  [statement ::= IF LPAREN expr RPAREN statement (*) ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on ELSE to state [72]

-------------------
lalr_state [72]: {
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) LBRACE statementS RBRACE , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= IF LPAREN expr RPAREN statement ELSE (*) statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on PRINTLN to state [22]
transition on IF to state [21]
transition on WHILE to state [20]
transition on statement to state [73]
transition on LBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [73]: {
  [statement ::= IF LPAREN expr RPAREN statement ELSE statement (*) , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [74]: {
  [expr ::= (*) expr TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= WHILE LPAREN (*) expr RPAREN statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= (*) expr LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [75]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [75]: {
  [expr ::= expr (*) DOT LENGTH , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= WHILE LPAREN expr (*) RPAREN statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT RPAREN LBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on RPAREN to state [76]
transition on LT to state [34]

-------------------
lalr_state [76]: {
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= WHILE LPAREN expr RPAREN (*) statement , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) LBRACE statementS RBRACE , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on PRINTLN to state [22]
transition on IF to state [21]
transition on WHILE to state [20]
transition on statement to state [77]
transition on LBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [77]: {
  [statement ::= WHILE LPAREN expr RPAREN statement (*) , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [78]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE (*) RBRACE , {EOF CLASS }]
}
transition on RBRACE to state [79]

-------------------
lalr_state [79]: {
  [mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [80]: {
  [statement ::= LBRACE statementS (*) RBRACE , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on RBRACE to state [84]

-------------------
lalr_state [81]: {
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
  [statementList ::= statementList (*) statement , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
  [statementS ::= statementList (*) , {RETURN RBRACE }]
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
  [statement ::= (*) LBRACE statementS RBRACE , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
}
transition on PRINTLN to state [22]
transition on IF to state [21]
transition on WHILE to state [20]
transition on statement to state [83]
transition on LBRACE to state [18]
transition on ID to state [17]

-------------------
lalr_state [82]: {
  [statementList ::= statement (*) , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [83]: {
  [statementList ::= statementList statement (*) , {ID RETURN IF WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [84]: {
  [statement ::= LBRACE statementS RBRACE (*) , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [85]: {
  [statement ::= ID LBRACK (*) expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= (*) expr TIMES expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [89]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [86]: {
  [expr ::= (*) expr TIMES expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [statement ::= ID ASSIGN (*) expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= (*) expr MINUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [87]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [87]: {
  [expr ::= expr (*) DOT LENGTH , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [statement ::= ID ASSIGN expr (*) SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= expr (*) LT expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [88]
transition on LT to state [34]

-------------------
lalr_state [88]: {
  [statement ::= ID ASSIGN expr SEMICOLON (*) , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [89]: {
  [expr ::= expr (*) DOT LENGTH , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [statement ::= ID LBRACK expr (*) RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT LBRACK RBRACK AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on LT to state [34]
transition on RBRACK to state [90]

-------------------
lalr_state [90]: {
  [statement ::= ID LBRACK expr RBRACK (*) ASSIGN expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}
transition on ASSIGN to state [91]

-------------------
lalr_state [91]: {
  [statement ::= ID LBRACK expr RBRACK ASSIGN (*) expr SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= (*) expr TIMES expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [92]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [92]: {
  [expr ::= expr (*) DOT LENGTH , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [statement ::= ID LBRACK expr RBRACK ASSIGN expr (*) SEMICOLON , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [93]
transition on LT to state [34]

-------------------
lalr_state [93]: {
  [statement ::= ID LBRACK expr RBRACK ASSIGN expr SEMICOLON (*) , {ID RETURN IF ELSE WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [94]: {
  [classDecl ::= (*) CLASS ID LBRACE varDeclList methodDeclList RBRACE , {EOF CLASS }]
  [program ::= mainClass classDeclList (*) , {EOF }]
  [classDeclList ::= classDeclList (*) classDecl , {EOF CLASS }]
}
transition on CLASS to state [96]
transition on classDecl to state [95]

-------------------
lalr_state [95]: {
  [classDeclList ::= classDeclList classDecl (*) , {EOF CLASS }]
}

-------------------
lalr_state [96]: {
  [classDecl ::= CLASS (*) ID LBRACE varDeclList methodDeclList RBRACE , {EOF CLASS }]
}
transition on ID to state [97]

-------------------
lalr_state [97]: {
  [classDecl ::= CLASS ID (*) LBRACE varDeclList methodDeclList RBRACE , {EOF CLASS }]
}
transition on LBRACE to state [98]

-------------------
lalr_state [98]: {
  [varDeclList ::= (*) , {ID PUBLIC INT BOOLEAN RBRACE }]
  [varDeclList ::= (*) varDeclList varDecl , {ID PUBLIC INT BOOLEAN RBRACE }]
  [classDecl ::= CLASS ID LBRACE (*) varDeclList methodDeclList RBRACE , {EOF CLASS }]
}
transition on varDeclList to state [99]

-------------------
lalr_state [99]: {
  [type ::= (*) ID , {ID }]
  [type ::= (*) INT LBRACK RBRACK , {ID }]
  [classDecl ::= CLASS ID LBRACE varDeclList (*) methodDeclList RBRACE , {EOF CLASS }]
  [varDecl ::= (*) type ID SEMICOLON , {ID PUBLIC INT BOOLEAN RBRACE }]
  [type ::= (*) INT , {ID }]
  [methodDeclList ::= (*) , {PUBLIC RBRACE }]
  [type ::= (*) BOOLEAN , {ID }]
  [varDeclList ::= varDeclList (*) varDecl , {ID PUBLIC INT BOOLEAN RBRACE }]
  [methodDeclList ::= (*) methodDeclList methodDecl , {PUBLIC RBRACE }]
}
transition on INT to state [105]
transition on BOOLEAN to state [104]
transition on varDecl to state [103]
transition on type to state [102]
transition on methodDeclList to state [101]
transition on ID to state [100]

-------------------
lalr_state [100]: {
  [type ::= ID (*) , {ID }]
}

-------------------
lalr_state [101]: {
  [methodDecl ::= (*) PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [methodDeclList ::= methodDeclList (*) methodDecl , {PUBLIC RBRACE }]
  [classDecl ::= CLASS ID LBRACE varDeclList methodDeclList (*) RBRACE , {EOF CLASS }]
}
transition on PUBLIC to state [112]
transition on RBRACE to state [111]
transition on methodDecl to state [110]

-------------------
lalr_state [102]: {
  [varDecl ::= type (*) ID SEMICOLON , {ID PUBLIC RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE RBRACE }]
}
transition on ID to state [108]

-------------------
lalr_state [103]: {
  [varDeclList ::= varDeclList varDecl (*) , {ID PUBLIC RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [104]: {
  [type ::= BOOLEAN (*) , {ID }]
}

-------------------
lalr_state [105]: {
  [type ::= INT (*) LBRACK RBRACK , {ID }]
  [type ::= INT (*) , {ID }]
}
transition on LBRACK to state [106]

-------------------
lalr_state [106]: {
  [type ::= INT LBRACK (*) RBRACK , {ID }]
}
transition on RBRACK to state [107]

-------------------
lalr_state [107]: {
  [type ::= INT LBRACK RBRACK (*) , {ID }]
}

-------------------
lalr_state [108]: {
  [varDecl ::= type ID (*) SEMICOLON , {ID PUBLIC RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE RBRACE }]
}
transition on SEMICOLON to state [109]

-------------------
lalr_state [109]: {
  [varDecl ::= type ID SEMICOLON (*) , {ID PUBLIC RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE RBRACE }]
}

-------------------
lalr_state [110]: {
  [methodDeclList ::= methodDeclList methodDecl (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [111]: {
  [classDecl ::= CLASS ID LBRACE varDeclList methodDeclList RBRACE (*) , {EOF CLASS }]
}

-------------------
lalr_state [112]: {
  [type ::= (*) INT , {ID }]
  [type ::= (*) BOOLEAN , {ID }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) INT LBRACK RBRACK , {ID }]
  [methodDecl ::= PUBLIC (*) type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on INT to state [105]
transition on BOOLEAN to state [104]
transition on type to state [113]
transition on ID to state [100]

-------------------
lalr_state [113]: {
  [methodDecl ::= PUBLIC type (*) ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on ID to state [114]

-------------------
lalr_state [114]: {
  [methodDecl ::= PUBLIC type ID (*) LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on LPAREN to state [115]

-------------------
lalr_state [115]: {
  [methodDecl ::= PUBLIC type ID LPAREN (*) formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) INT LBRACK RBRACK , {ID }]
  [formalS ::= (*) formalList , {RPAREN }]
  [type ::= (*) INT , {ID }]
  [formal ::= (*) type ID , {RPAREN COMMA }]
  [formalList ::= (*) formal , {RPAREN COMMA }]
  [type ::= (*) BOOLEAN , {ID }]
  [formalS ::= (*) , {RPAREN }]
  [formalList ::= (*) formalList COMMA formal , {RPAREN COMMA }]
}
transition on INT to state [105]
transition on BOOLEAN to state [104]
transition on formalS to state [119]
transition on formalList to state [118]
transition on type to state [117]
transition on formal to state [116]
transition on ID to state [100]

-------------------
lalr_state [116]: {
  [formalList ::= formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [117]: {
  [formal ::= type (*) ID , {RPAREN COMMA }]
}
transition on ID to state [131]

-------------------
lalr_state [118]: {
  [formalList ::= formalList (*) COMMA formal , {RPAREN COMMA }]
  [formalS ::= formalList (*) , {RPAREN }]
}
transition on COMMA to state [129]

-------------------
lalr_state [119]: {
  [methodDecl ::= PUBLIC type ID LPAREN formalS (*) RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on RPAREN to state [120]

-------------------
lalr_state [120]: {
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN (*) LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on LBRACE to state [121]

-------------------
lalr_state [121]: {
  [varDeclList ::= (*) , {ID RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE }]
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE (*) varDeclList statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [varDeclList ::= (*) varDeclList varDecl , {ID RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE }]
}
transition on varDeclList to state [122]

-------------------
lalr_state [122]: {
  [type ::= (*) ID , {ID }]
  [type ::= (*) INT LBRACK RBRACK , {ID }]
  [varDecl ::= (*) type ID SEMICOLON , {ID RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE }]
  [statement ::= (*) PRINTLN LPAREN expr RPAREN SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [statement ::= (*) LBRACE statementS RBRACE , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [statementList ::= (*) statement , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [type ::= (*) INT , {ID }]
  [statement ::= (*) ID LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [statement ::= (*) WHILE LPAREN expr RPAREN statement , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [statementS ::= (*) , {RETURN }]
  [statementList ::= (*) statementList statement , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [type ::= (*) BOOLEAN , {ID }]
  [varDeclList ::= varDeclList (*) varDecl , {ID RETURN INT BOOLEAN IF WHILE PRINTLN LBRACE }]
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList (*) statementS RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [statement ::= (*) ID ASSIGN expr SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [statement ::= (*) IF LPAREN expr RPAREN statement ELSE statement , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [statementS ::= (*) statementList , {RETURN }]
}
transition on statementS to state [124]
transition on type to state [102]
transition on statement to state [82]
transition on ID to state [123]
transition on IF to state [21]
transition on statementList to state [81]
transition on PRINTLN to state [22]
transition on BOOLEAN to state [104]
transition on LBRACE to state [18]
transition on WHILE to state [20]
transition on INT to state [105]
transition on varDecl to state [103]

-------------------
lalr_state [123]: {
  [statement ::= ID (*) ASSIGN expr SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE }]
  [type ::= ID (*) , {ID }]
  [statement ::= ID (*) LBRACK expr RBRACK ASSIGN expr SEMICOLON , {ID RETURN IF WHILE PRINTLN LBRACE }]
}
transition on ASSIGN to state [86]
transition on LBRACK to state [85]

-------------------
lalr_state [124]: {
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS (*) RETURN expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
}
transition on RETURN to state [125]

-------------------
lalr_state [125]: {
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN (*) expr SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [expr ::= (*) expr TIMES expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) TRUE , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW ID LPAREN RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr PLUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT ID LPAREN expS RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) THIS , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr AND expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) FALSE , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) EXCLAMATION expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr MINUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) INTEGER_LITERAL , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) NEW INT LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr LT expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) expr DOT LENGTH , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) ID , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= (*) LPAREN expr RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
}
transition on INTEGER_LITERAL to state [32]
transition on LPAREN to state [31]
transition on expr to state [126]
transition on THIS to state [29]
transition on EXCLAMATION to state [28]
transition on ID to state [27]
transition on FALSE to state [26]
transition on TRUE to state [25]
transition on NEW to state [24]

-------------------
lalr_state [126]: {
  [expr ::= expr (*) DOT LENGTH , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) MINUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) AND expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LBRACK expr RBRACK , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) PLUS expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr (*) SEMICOLON RBRACE , {PUBLIC RBRACE }]
  [expr ::= expr (*) DOT ID LPAREN expS RPAREN , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) TIMES expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
  [expr ::= expr (*) LT expr , {LT LBRACK SEMICOLON AND PLUS MINUS TIMES DOT }]
}
transition on DOT to state [41]
transition on TIMES to state [40]
transition on MINUS to state [39]
transition on LBRACK to state [38]
transition on PLUS to state [37]
transition on AND to state [36]
transition on SEMICOLON to state [127]
transition on LT to state [34]

-------------------
lalr_state [127]: {
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON (*) RBRACE , {PUBLIC RBRACE }]
}
transition on RBRACE to state [128]

-------------------
lalr_state [128]: {
  [methodDecl ::= PUBLIC type ID LPAREN formalS RPAREN LBRACE varDeclList statementS RETURN expr SEMICOLON RBRACE (*) , {PUBLIC RBRACE }]
}

-------------------
lalr_state [129]: {
  [type ::= (*) INT , {ID }]
  [formal ::= (*) type ID , {RPAREN COMMA }]
  [type ::= (*) BOOLEAN , {ID }]
  [formalList ::= formalList COMMA (*) formal , {RPAREN COMMA }]
  [type ::= (*) ID , {ID }]
  [type ::= (*) INT LBRACK RBRACK , {ID }]
}
transition on INT to state [105]
transition on BOOLEAN to state [104]
transition on type to state [117]
transition on formal to state [130]
transition on ID to state [100]

-------------------
lalr_state [130]: {
  [formalList ::= formalList COMMA formal (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [131]: {
  [formal ::= type ID (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [132]: {
  [$START ::= program EOF (*) , {EOF }]
}

-------------------
Closing files...
------- CUP v0.10k Parser Generation Summary -------
  0 errors and 0 warnings
  38 terminals, 19 non-terminals, and 52 productions declared, 
  producing 133 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10k)
