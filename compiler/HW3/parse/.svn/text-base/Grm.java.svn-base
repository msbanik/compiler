
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Feb 17 22:30:28 EST 2013
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import util.*;

/** CUP v0.10k generated parser.
  * @version Sun Feb 17 22:30:28 EST 2013
  */
public class Grm extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Grm() {super();}

  /** Constructor which sets the default scanner. */
  public Grm(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\024\004\000\002\023" +
    "\023\000\002\021\004\000\002\021\002\000\002\022\010" +
    "\000\002\013\004\000\002\013\002\000\002\020\005\000" +
    "\002\016\004\000\002\016\002\000\002\017\017\000\002" +
    "\014\005\000\002\014\003\000\002\015\003\000\002\015" +
    "\002\000\002\006\004\000\002\007\005\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\012\004\000" +
    "\002\012\003\000\002\011\003\000\002\011\002\000\002" +
    "\010\005\000\002\010\011\000\002\010\007\000\002\010" +
    "\007\000\002\010\006\000\002\010\011\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\006\000\002\003\005\000\002" +
    "\003\010\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\007" +
    "\000\002\003\006\000\002\003\004\000\002\003\005\000" +
    "\002\004\003\000\002\004\002\000\002\005\005\000\002" +
    "\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\006\006\001\002\000\004\002\206\001" +
    "\002\000\006\002\ufffd\006\ufffd\001\002\000\004\004\007" +
    "\001\002\000\004\031\010\001\002\000\004\007\011\001" +
    "\002\000\004\010\012\001\002\000\004\011\013\001\002" +
    "\000\004\012\014\001\002\000\004\033\015\001\002\000" +
    "\004\013\016\001\002\000\004\035\017\001\002\000\004" +
    "\036\020\001\002\000\004\004\021\001\002\000\004\034" +
    "\022\001\002\000\004\031\023\001\002\000\014\004\024" +
    "\017\030\021\027\022\031\031\025\001\002\000\006\035" +
    "\130\041\131\001\002\000\016\004\024\017\030\021\027" +
    "\022\031\031\025\032\uffe9\001\002\000\004\032\121\001" +
    "\002\000\004\033\115\001\002\000\004\033\107\001\002" +
    "\000\004\033\032\001\002\000\022\004\036\005\043\024" +
    "\034\025\035\026\040\027\033\033\042\047\037\001\002" +
    "\000\006\004\100\015\101\001\002\000\030\030\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\uffd9\001\002\000\030\030\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\001\002\000\030\030\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\001\002\000\022\004\036\005" +
    "\043\024\034\025\035\026\040\027\033\033\042\047\037" +
    "\001\002\000\030\030\uffd6\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\001\002\000\022\030\045\034\075\035\052\042\047\043" +
    "\050\044\051\045\053\046\054\001\002\000\022\004\036" +
    "\005\043\024\034\025\035\026\040\027\033\033\042\047" +
    "\037\001\002\000\030\030\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046" +
    "\uffda\001\002\000\022\030\045\034\046\035\052\042\047" +
    "\043\050\044\051\045\053\046\054\001\002\000\022\004" +
    "\036\005\043\024\034\025\035\026\040\027\033\033\042" +
    "\047\037\001\002\000\030\030\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\001\002\000\022\004\036\005\043\024\034\025" +
    "\035\026\040\027\033\033\042\047\037\001\002\000\022" +
    "\004\036\005\043\024\034\025\035\026\040\027\033\033" +
    "\042\047\037\001\002\000\022\004\036\005\043\024\034" +
    "\025\035\026\040\027\033\033\042\047\037\001\002\000" +
    "\022\004\036\005\043\024\034\025\035\026\040\027\033" +
    "\033\042\047\037\001\002\000\022\004\036\005\043\024" +
    "\034\025\035\026\040\027\033\033\042\047\037\001\002" +
    "\000\006\004\055\023\056\001\002\000\004\033\057\001" +
    "\002\000\030\030\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\001" +
    "\002\000\024\004\036\005\043\024\034\025\035\026\040" +
    "\027\033\033\042\034\uffd0\047\037\001\002\000\004\034" +
    "\uffd1\001\002\000\024\030\045\034\uffce\035\052\040\064" +
    "\042\047\043\050\044\051\045\053\046\054\001\002\000" +
    "\004\034\063\001\002\000\030\030\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\001\002\000\022\004\036\005\043\024\034" +
    "\025\035\026\040\027\033\033\042\047\037\001\002\000" +
    "\004\034\uffcf\001\002\000\030\030\uffe0\034\uffe0\035\052" +
    "\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\046\054\001\002\000\022\030\045\035\052\036\070" +
    "\042\047\043\050\044\051\045\053\046\054\001\002\000" +
    "\030\030\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\001\002\000" +
    "\030\030\uffe1\034\uffe1\035\052\036\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\043\uffe1\044\uffe1\045\053\046\054\001\002\000" +
    "\030\030\uffe2\034\uffe2\035\052\036\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\053\046\054\001\002\000" +
    "\030\030\045\034\uffde\035\052\036\uffde\037\uffde\040\uffde" +
    "\042\uffde\043\050\044\051\045\053\046\054\001\002\000" +
    "\030\030\uffdf\034\uffdf\035\052\036\uffdf\037\uffdf\040\uffdf" +
    "\042\uffdf\043\050\044\051\045\053\046\054\001\002\000" +
    "\004\037\076\001\002\000\022\004\uffe5\014\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\031\uffe5\032\uffe5\001\002\000" +
    "\030\030\uffd3\034\uffd3\035\052\036\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\054\001\002\000" +
    "\004\033\105\001\002\000\004\035\102\001\002\000\022" +
    "\004\036\005\043\024\034\025\035\026\040\027\033\033" +
    "\042\047\037\001\002\000\022\030\045\035\052\036\104" +
    "\042\047\043\050\044\051\045\053\046\054\001\002\000" +
    "\030\030\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000" +
    "\004\034\106\001\002\000\030\030\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\046\uffd4\001\002\000\022\004\036\005\043\024\034" +
    "\025\035\026\040\027\033\033\042\047\037\001\002\000" +
    "\022\030\045\034\111\035\052\042\047\043\050\044\051" +
    "\045\053\046\054\001\002\000\014\004\024\017\030\021" +
    "\027\022\031\031\025\001\002\000\004\020\113\001\002" +
    "\000\014\004\024\017\030\021\027\022\031\031\025\001" +
    "\002\000\022\004\uffe7\014\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\031\uffe7\032\uffe7\001\002\000\022\004\036\005" +
    "\043\024\034\025\035\026\040\027\033\033\042\047\037" +
    "\001\002\000\022\030\045\034\117\035\052\042\047\043" +
    "\050\044\051\045\053\046\054\001\002\000\014\004\024" +
    "\017\030\021\027\022\031\031\025\001\002\000\022\004" +
    "\uffe6\014\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\031\uffe6" +
    "\032\uffe6\001\002\000\004\032\122\001\002\000\006\002" +
    "\uffff\006\uffff\001\002\000\006\014\uffea\032\uffea\001\002" +
    "\000\020\004\024\014\uffeb\017\030\021\027\022\031\031" +
    "\025\032\uffeb\001\002\000\004\032\126\001\002\000\022" +
    "\004\uffe8\014\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\031" +
    "\uffe8\032\uffe8\001\002\000\006\014\uffec\032\uffec\001\002" +
    "\000\022\004\036\005\043\024\034\025\035\026\040\027" +
    "\033\033\042\047\037\001\002\000\022\004\036\005\043" +
    "\024\034\025\035\026\040\027\033\033\042\047\037\001" +
    "\002\000\022\030\045\035\052\037\133\042\047\043\050" +
    "\044\051\045\053\046\054\001\002\000\022\004\uffe4\014" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\031\uffe4\032\uffe4" +
    "\001\002\000\022\030\045\035\052\036\135\042\047\043" +
    "\050\044\051\045\053\046\054\001\002\000\004\041\136" +
    "\001\002\000\022\004\036\005\043\024\034\025\035\026" +
    "\040\027\033\033\042\047\037\001\002\000\022\030\045" +
    "\035\052\037\140\042\047\043\050\044\051\045\053\046" +
    "\054\001\002\000\022\004\uffe3\014\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\031\uffe3\032\uffe3\001\002\000\006\002" +
    "\000\006\143\001\002\000\006\002\ufffe\006\ufffe\001\002" +
    "\000\004\004\144\001\002\000\004\031\145\001\002\000" +
    "\014\004\ufffa\007\ufffa\015\ufffa\016\ufffa\032\ufffa\001\002" +
    "\000\014\004\147\007\ufff7\015\154\016\153\032\ufff7\001" +
    "\002\000\004\004\uffed\001\002\000\006\007\163\032\162" +
    "\001\002\000\004\004\157\001\002\000\026\004\ufffb\007" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb" +
    "\031\ufffb\032\ufffb\001\002\000\004\004\uffef\001\002\000" +
    "\006\004\uffee\035\155\001\002\000\004\036\156\001\002" +
    "\000\004\004\ufff0\001\002\000\004\037\160\001\002\000" +
    "\026\004\ufff9\007\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\021\ufff9\022\ufff9\031\ufff9\032\ufff9\001\002\000\006\007" +
    "\ufff8\032\ufff8\001\002\000\006\002\ufffc\006\ufffc\001\002" +
    "\000\010\004\147\015\154\016\153\001\002\000\004\004" +
    "\165\001\002\000\004\033\166\001\002\000\010\004\147" +
    "\015\154\016\153\001\002\000\006\034\174\040\173\001" +
    "\002\000\006\034\ufff4\040\ufff4\001\002\000\004\004\172" +
    "\001\002\000\006\034\ufff1\040\ufff1\001\002\000\010\004" +
    "\147\015\154\016\153\001\002\000\004\031\175\001\002" +
    "\000\022\004\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\031\ufffa\001\002\000\022\004\200\014\uffe9" +
    "\015\154\016\153\017\030\021\027\022\031\031\025\001" +
    "\002\000\004\014\201\001\002\000\010\004\uffed\035\130" +
    "\041\131\001\002\000\022\004\036\005\043\024\034\025" +
    "\035\026\040\027\033\033\042\047\037\001\002\000\022" +
    "\030\045\035\052\037\203\042\047\043\050\044\051\045" +
    "\053\046\054\001\002\000\004\032\204\001\002\000\006" +
    "\007\ufff6\032\ufff6\001\002\000\006\034\ufff5\040\ufff5\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\023\004\024\003\001\001\000\002\001" +
    "\001\000\004\021\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\025\001\001" +
    "\000\002\001\001\000\010\010\123\011\124\012\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\073\001\001\000\002\001\001\000" +
    "\004\003\072\001\001\000\004\003\071\001\001\000\004" +
    "\003\070\001\001\000\004\003\066\001\001\000\004\003" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\060\004\061\005\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\060\005\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\107\001\001\000" +
    "\002\001\001\000\004\010\111\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\002\001\001\000\004\003" +
    "\115\001\001\000\002\001\001\000\004\010\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\123\012\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\133\001\001\000\004\003\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\145\001\001\000\010" +
    "\007\150\016\147\020\151\001\001\000\002\001\001\000" +
    "\004\017\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\167\007\170" +
    "\014\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\204\007\170" +
    "\001\001\000\002\001\001\000\004\013\175\001\001\000" +
    "\014\007\150\010\123\011\176\012\122\020\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\201\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Grm$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    errormsg.ErrorMsg errorMsg;

    public void syntax_error(java_cup.runtime.Symbol current) {
      report_error("Syntax error (" + current.sym + ")", current);
    }

    public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
    }

    public Grm(java_cup.runtime.Scanner scan, errormsg.ErrorMsg err) {
      this(scan);
      errorMsg = err;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {
  private final Grm parser;

  /** Constructor */
  CUP$Grm$actions(Grm parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expRest ::= expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expRest ::= expr COMMA expRest 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expRest*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expList ::= expRest 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(2/*expList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= EXCLAMATION expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= NEW ID LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= NEW INT LBRACK expr RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= THIS 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= FALSE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= TRUE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= INTEGER_LITERAL 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr DOT ID LPAREN expList RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr DOT LENGTH 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr LBRACK expr RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr AND expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr LT expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr TIMES expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MINUS expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr PLUS expr 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expr*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= ID LBRACK expr RBRACK ASSIGN expr SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= ID ASSIGN expr SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= PRINTLN LPAREN expr RPAREN SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= WHILE LPAREN expr RPAREN statement 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement ::= IF LPAREN expr RPAREN statement ELSE statement 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // statement ::= LBRACE statementStar RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statementStar ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*statementStar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statementStar ::= statementList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*statementStar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statementList ::= statement 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*statementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statementList ::= statement statementList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*statementList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= ID 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= BOOLEAN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= INT LBRACK RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // formal ::= type ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*formal*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // formalStar ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*formalStar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalStar ::= formalList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*formalStar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalList ::= formal 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*formalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalList ::= formalList COMMA formal 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(10/*formalList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methodDecl ::= PUBLIC type ID LPAREN formalList RPAREN LBRACE varDeclList statementStar RETURN expr SEMICOLON RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*methodDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-12)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methodDeclList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*methodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // methodDeclList ::= methodDeclList methodDecl 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*methodDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type ID SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(14/*varDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDeclList ::= varDeclList varDecl 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classDecl ::= CLASS ID LBRACE varDeclList methodDeclList RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(16/*classDecl*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDeclList ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*classDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDeclList ::= classDeclList classDecl 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*classDeclList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // mainClass ::= CLASS ID LBRACE PUBLIC STATIC VOID MAIN LPAREN STRING LBRACK RBRACK ID RPAREN LBRACE statement RBRACE RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*mainClass*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-16)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= mainClass classDeclList 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*program*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

